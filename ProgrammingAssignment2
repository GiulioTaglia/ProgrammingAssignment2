#Matrix inversion is usually a costly computation and there may be some benefit 
#to caching the inverse of a matrix rather than compute it repeatedly
#The assumption is that all the matrix usde are invertible 
# makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.



makeCacheMatrix<-function(x=matrix()){
  
    inverseM<-NULL
    
    set<-function(y){
          x <<- y
          inverseM <<- NULL
    }
    
    get<- function()x
    setinverseM <- function(inverse) inverseM <<- inverse
    getinverseM <- function() inverseM
    list(set = set, get = get, setinverseM = setinverseM, getinverseM=getinverseM )
  
}

# cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed), 
# then the cachesolve retrieves the inverse from the cache.

CacheSolve<-function(x,...){
  inverseM<-x$getinverseM()

if(!is.null(inverseM)) {
  message("getting cached data")
  return(inverseM)
}
data <- x$get()
inverseM<- solve(data, ...)
x$setinverseM(inverseM)
inverseM

}
